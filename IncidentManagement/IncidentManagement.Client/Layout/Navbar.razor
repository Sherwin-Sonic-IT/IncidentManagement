@rendermode @(new InteractiveAutoRenderMode(false))

<div class="navbar">
    <p class="navbar__logo">Incident Management (IM)</p>
    <div class="navbar__right__section">
     @*
        <div class="navbar__search">
        <input type="search" class="navbar__search-input" placeholder="Search . . ." />
        <i class="bi bi-search navbar__search-icon"></i>
        </div>
     *@
        <FluentButton Appearance=Appearance.Accent>
            <i class="bi bi-bell-fill navbar__notification-icon">
                    @if (newIncidentCount > 0)
                    {
                   <span class="navbar__notification-count">@newIncidentCount</span>
                    }
            </i>
        </FluentButton>
        <FluentButton Appearance=Appearance.Accent Style="margin: 0 1rem;">
            <i class="bi bi-chat-square-dots-fill navbar__message-icon">
                @if (newCommentCount > 0)
                {
                    <span class="navbar__notification-count">@newCommentCount</span>
                }
            </i>
        </FluentButton>
        <div class="navbar__user__account">
            <FluentStack HorizontalAlignment="@HorizontalAlignment.End"
                         VerticalAlignment="@VerticalAlignment.Center"
                         Style="height: 50px;">
                <FluentProfileMenu Image="\assets\adminphoto\person.jpg"
                                   Status="@PresenceStatus.Available"
                                   HeaderLabel="@userRole"
                                   Initials="BG"
                                   FullName="@userName"
                                   EMail="sonicsalesdistribution.com"
                                   PopoverStyle="min-width: 330px;" />
            </FluentStack>
        </div>
        <Notification isNotificationVisible="isNotificationVisible" IsNotificationVisibleChanged="OnNotificationVisibilityChanged" />

        <Comment isCommentNotificationVisible="isCommentNotificationVisible" isCommentNotificationVisibleChanged="OnCommentNotificationVisibilityChanged" />
    </div>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private List<Incidents_TBL> Incidents { get; set; } = new();
    private List<Board_TBL> Board { get; set; } = new();
    private string userName;
    private string userRole;
    private int newIncidentCount;
    private int newCommentCount;

    private bool isNotificationVisible = false;
    private bool isCommentNotificationVisible = false;


    protected override async Task OnInitializedAsync()
    {
        await Auth();
        await getAllIncident();
        getNewIncidentCount();
        await getNewCommentCount();
    }

    private void ToggleNotifications()
    {
        isNotificationVisible = !isNotificationVisible;
    }

    private void ToggleCommentNotification()
    {
        isCommentNotificationVisible = !isCommentNotificationVisible;
    }

    private async Task OnNotificationVisibilityChanged(bool isVisible)
    {
        isNotificationVisible = isVisible; 
        StateHasChanged();  
    }

    private async Task OnCommentNotificationVisibilityChanged(bool isVisible)
    {
        isCommentNotificationVisible = isVisible;
        StateHasChanged();
    }

    private async Task Auth()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        userName = user.Identity?.Name ?? "Guest";

        var roleClaim = user?.FindFirst(ClaimTypes.Role);
        userRole = roleClaim?.Value ?? "No role assigned";
    }

    private async Task getAllIncident()
    {
        var incidents = await IncidentService.GetAllIncidentsAsync();

        if (incidents != null)
        {
            Incidents.Clear();
            Incidents.AddRange(incidents);
        }
    }

    private void getNewIncidentCount()
    {
        newIncidentCount = Incidents.Count(i => i.Date_Reported.Date == DateTime.Today.Date && i.Status == "Pending");
    }

    private async Task getNewCommentCount()
    {
        Board.Clear();
        foreach (var incident in Incidents)
        {
            var comments = await BoardService.GetCommentsByIncidentIdAsync(incident.Incident_ID);
            Board.AddRange(comments);
        }
        newCommentCount = Board.Count(b => b.CreatedAt.Date == DateTime.Today.Date);
        StateHasChanged();
    }


}
