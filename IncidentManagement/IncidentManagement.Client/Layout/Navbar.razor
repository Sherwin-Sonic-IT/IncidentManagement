@rendermode @(new InteractiveAutoRenderMode(false))

<AuthorizeView Roles="SysAdmin, User, Head">
    <Authorized>
    <div class="navbar">
        <p class="navbar__logo">Incident Management (IM)</p>
        <div class="navbar__right__section">
            <FluentButton Appearance=Appearance.Accent>
                <i class="bi bi-bell-fill navbar__notification-icon">
                    @if (newIncidentCount > 0)
                    {
                        <span class="navbar__notification-count">@newIncidentCount</span>
                    }
                </i>
            </FluentButton>
            <FluentButton Appearance=Appearance.Accent Style="margin: 0 1rem;" @onclick="ToggleCommentNotification">
                <i class="bi bi-chat-square-dots-fill navbar__message-icon">
                    @if (unreadCommentsCount > 0)
                    {
                        <span class="navbar__notification-count">@unreadCommentsCount</span>
                    }
                </i>
            </FluentButton>
            <div class="navbar__user__account">
                <FluentStack HorizontalAlignment="@HorizontalAlignment.End"
                             VerticalAlignment="@VerticalAlignment.Center"
                             Style="height: 50px;">
                    <FluentProfileMenu Image="\assets\adminphoto\person.jpg"
                                       Status="@PresenceStatus.Available"
                                       HeaderLabel="@userRole"
                                       Initials="BG"
                                       FullName="@currentUserName"
                                       EMail="sonicsalesdistribution.com"
                                       PopoverStyle="min-width: 330px;"
                                       OnHeaderButtonClick="Logout" />
                </FluentStack>
            </div>
            <Notification isNotificationVisible="isNotificationVisible" IsNotificationVisibleChanged="OnNotificationVisibilityChanged" />

            <Comment isCommentNotificationVisible="isCommentNotificationVisible" isCommentNotificationVisibleChanged="OnCommentNotificationVisibilityChanged"
                     UnreadCommentsMarkAsReadCountChanged="OnUnreadCommentsMarkAsReadCountChanged" />
        </div>
    </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private List<Board_TBL> comments = new List<Board_TBL>();
    private int unreadCommentsCount;
    private Timer _timer;
    private const int RefreshInterval = 30000;
    private int newIncidentCount;

    private int currentUserId;
    private string currentUserName;
    private string currentUserLocation;
    private string userRole;
    private bool IsAdmin;

    private bool isNotificationVisible = false;
    private bool isCommentNotificationVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await UserAuthentication();
        await LoadUnreadCommentsAsync();
        await StartTimer();
    }

    private void ToggleNotifications()
    {
        isNotificationVisible = !isNotificationVisible;
    }

    private void ToggleCommentNotification()
    {
        isCommentNotificationVisible = !isCommentNotificationVisible;
    }

    private async Task OnNotificationVisibilityChanged(bool isVisible)
    {
        isNotificationVisible = isVisible;
        StateHasChanged();
    }

    private async Task OnCommentNotificationVisibilityChanged(bool isVisible)
    {
        isCommentNotificationVisible = isVisible;
        StateHasChanged();
    }

    private async Task UserAuthentication()
    {
        var (userId, userName, role, isAdmin, location) = await AuthenticationService.AuthenticateUser();

        currentUserId = userId;
        currentUserName = userName;
        currentUserLocation = location;
        userRole = role;
        IsAdmin = isAdmin;
    }

    private async Task LoadUnreadCommentsAsync()
    {
        var today = DateTime.Today;
        comments = await BoardService.GetCommentsByDateAndStatusAsync(today, "unread");
        if (IsAdmin)
        {
            comments = comments.Where(comment => comment.Username != currentUserName).ToList();
            unreadCommentsCount = comments.Count();
        }
        else
        {
            comments = comments.Where(comment =>
            (comment.ParentCommentID == currentUserId || comment.Resolver_ID == currentUserId) ||
            comment.Resolver_DeptHead_ID == currentUserId || comment.Department_Head == currentUserName).ToList();
            unreadCommentsCount = comments.Count();
           // comments = comments.Where(comment =>
           //      comment.ParentCommentID == currentUserId || comment.Resolver_ID == currentUserId).ToList();
           //  unreadCommentsCount = comments.Count();
        }
        Console.WriteLine($"Filtered Comments Count: {comments.Count}");
        StateHasChanged();
    }

    private async Task StartTimer()
    {
        _timer = new Timer(RefreshInterval);
        _timer.Elapsed += async (sender, e) => await InvokeAsync(() => LoadUnreadCommentsAsync());
        _timer.Start();
    }

    private async Task StopTimer()
    {
        if (_timer != null)
        {
            _timer.Stop();
            _timer.Dispose();
        }
    }

    private async Task OnUnreadCommentsMarkAsReadCountChanged(int newUnreadCount)
    {
        unreadCommentsCount = newUnreadCount;
        StateHasChanged();  

    }

    private async Task Logout()
    {
            NavigationManager.NavigateTo("/Logout");
    }


}
