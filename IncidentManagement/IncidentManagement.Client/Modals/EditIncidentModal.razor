@rendermode @(new InteractiveAutoRenderMode(false))

<div class="edit__incident-modal-overlay @(isEditIncidentModalFormVisible ? "show__edit__incident-modal" : "hide__edit__incident-modal")">
    <div class="edit__incident-modal">
        <div class="edit__incident-modal-header">
            <h5 class="edit__incident-modal-header-title">EDIT INCIDENT</h5>
        </div>

        <div class="edit__incident-modal-reminder">
            <i class="bi bi-exclamation-circle"></i> <p> You will be notified once your incident has been reviewed and actioned. Please check dashboard for updates.</p>
        </div>

        <EditForm Model="IncidentModel" OnValidSubmit="handleUpdate" FormName="EditIncident">
            <DataAnnotationsValidator />
            <div class="edit__incident-modal-body">
                <div class="edit__incident-modal-form-group">
                    <div class="edit__incident-modal-input-group">
                        <label>Incident Date</label>
                        <InputDate @bind-Value="IncidentModel.Incident_Date" min=@DateTime.Today.AddMonths(-1).ToString("yyyy'-'MM'-'dd")
                                   max=@DateTime.Today.ToString("yyyy'-'MM'-'dd") />
                    </div>
                    @if (IsAdmin)
                    {
                        <div class="edit__incident-modal-input-group">
                            <label>End-Affected/User</label>
                            <InputText @bind-Value="IncidentModel.Reported_By" />
                        </div>
                    }
                </div>
                @if (IsAdmin)
                {
                    <div class="edit__incident-modal-form-group">
                        <div class="edit__incident-modal-input-group">
                            <label>Department</label>
                            <InputSelect @bind-Value="IncidentModel.Location" disabled="@string.IsNullOrEmpty(IncidentModel.Reported_By)" required>
                                <option value="">--Select your department--</option>
                                @foreach (var locationGroup in IncidentFormDictionary.LocationDepartments.Keys)
                                {
                                    <option disabled style="background-color: #e5e4e2; color: darkblue">@locationGroup</option>
                                    @foreach (var department in IncidentFormDictionary.LocationDepartments[locationGroup])
                                    {
                                        <option value="@department">@department</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="edit__incident-modal-input-group">
                            <label>Department Head</label>
                            <InputSelect @bind-Value="IncidentModel.Department_Head" disabled="@string.IsNullOrEmpty(IncidentModel.Location)" required>
                                @foreach (var incident in GetDepartmentHeadForLocationDepartment(IncidentModel.Location))
                                {
                                    <option value="@incident">@incident</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                }
                <div class="edit__incident-modal-form-group">
                    <div class="edit__incident-modal-input-group">
                        <div class="edit__incident-modal-label-category">
                            <label>Category</label> <i @onclick="IsCategoryDisabled ? null : ResetCategory" class="bi bi-arrow-clockwise @(!IsCategoryDisabled ? "enable__new__incident-modal-reset-category-icon" : "disabled__new__incident-modal-reset-category-icon")"></i>
                        </div>
                        <InputSelect @bind-Value="IncidentModel.Category" disabled="@(string.IsNullOrEmpty(IncidentModel.Department_Head) || !string.IsNullOrEmpty(IncidentModel.Incident_Name))">
                            <option value="">--Select a category--</option>
                            <option disabled>IT</option>
                            <option value="Hardware Issues">Hardware Issues</option>
                            <option value="Network & Connectivity Issues">Network & Connectivity Issues</option>
                            <option value="User Account & Access Issues">User Account & Access Issues</option>
                            <option value="End-User Requests & Assistance">End-User Requests & Assistance</option>
                            <option value="WMS Issue">WMS Issue</option>
                            <option value="ISR Issue">ISR Issue</option>
                            <option disabled>LOGISTIC</option>
                            <option value="Transportation/Equipment Management">Transportation/Equipment Management</option>
                            <option value="Others">Others</option>
                        </InputSelect>
                    </div>
                    <div class="edit__incident-modal-input-group">
                        <label>Incident Name</label>
                        @if (IncidentModel.Category == "Others")
                        {
                            <InputText @bind-Value="IncidentModel.Incident_Name" disabled="@string.IsNullOrEmpty(IncidentModel.Category)" required />
                        }
                        else
                        {
                            <InputSelect @bind-Value="IncidentModel.Incident_Name" disabled="@string.IsNullOrEmpty(IncidentModel.Category)" required>
                                <option value="">--Select an incident--</option>
                                @foreach (var incident in GetIncidentNamesForCategory(IncidentModel.Category))
                                {
                                    <option value="@incident">@incident</option>
                                }
                            </InputSelect>
                        }
                    </div>
                </div>
                <div class="edit__incident-modal-form-group">
                    <div class="edit__incident-modal-input-group">
                        <label>Priority</label>
                        @if (IncidentModel.Category == "Others")
                        {
                            <InputSelect @bind-Value="IncidentModel.Priority" disabled="@string.IsNullOrEmpty(IncidentModel.Incident_Name)" required>
                                <option value="Others">Others</option>
                            </InputSelect>
                        }
                        else
                        {
                            <InputSelect @bind-Value="IncidentModel.Priority" disabled="@string.IsNullOrEmpty(IncidentModel.Incident_Name)" required>
                                @foreach (var incident in GetPriorityForIncidentName(IncidentModel.Incident_Name))
                                {
                                    <option value="@incident">@incident</option>
                                }
                            </InputSelect>
                        }
                    </div>
                    <div class="edit__incident-modal-input-group">
                        <div class="edit__incident-modal-label-resolver-name">
                            <label>Resolver Name</label>
                            @*    @if (IsAdmin)
                            {
                            <i class="bi bi-pencil-square" @onclick="EditResolverName"></i>
                            }*@
                        </div>
                        @if (isEditResolverName)
                        {
                            <InputSelect @bind-Value="IncidentModel.Resolver_Name" disabled="@(IsAdmin ? false : true)">
                                <option value="Glenne">Glenne</option>
                                <option value="Junix Chan">Junix Chan</option>
                                <option value="Foilan">Froilan</option>
                                <option value="Emman">Emman</option>
                                <option value="Mae">Mae</option>
                                <option value="Sherwin">Sherwin</option>
                            </InputSelect>
                        }
                        else
                        {
                            @if (IncidentModel.Category == "Others")
                            {
                                <InputText @bind-Value="IncidentModel.Resolver_Name" disabled="@string.IsNullOrEmpty(IncidentModel.Incident_Name)" />
                            }
                            else
                            {
                                <InputSelect @bind-Value="IncidentModel.Resolver_Name" disabled="@string.IsNullOrEmpty(IncidentModel.Incident_Name)">
                                    @foreach (var incident in GetResolverForIncidentName(IncidentModel.Incident_Name))
                                    {
                                        <option value="@incident">@incident</option>
                                    }
                                </InputSelect>
                            }
                        }
                    </div>
                </div>
                <div class="edit__incident-modal-form-group">
                    <div class="edit__incident-modal-input-group">
                        <label>Status</label>
                        <InputSelect @bind-Value="IncidentModel.Status">
                            <option value="Pending">Pending</option>
                            <option value="Completed">Completed</option>
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="edit__incident-modal-footer">
                <button type="submit" class="edit__incident-modal-btn edit__incident-modal-btn-save">Save</button>
                <button type="button" class="edit__incident-modal-btn edit__incident-modal-btn-cancel" @onclick="CloseModal">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [CascadingParameter]
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Parameter] public string Incident_ID { get; set; }
    [Parameter] public int SelectedIncidentID { get; set; }
    [Parameter] public bool isEditIncidentModalFormVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnUpdate { get; set; }
    [Parameter] public Incidents_TBL IncidentModel { get; set; } = new Incidents_TBL();
    private Incidents_TBL ReturnIncident = new();

    private bool isEditResolverName = false;

    private bool IsAdmin { get; set; }
    private bool IsCategoryDisabled => string.IsNullOrEmpty(IncidentModel.Incident_Name);

    protected override async Task OnInitializedAsync()
    {
        await userAuth();
    }

    private async Task userAuth()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.IsInRole("Admin");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedIncidentID > 0)
        {
            try
            {
                var incident = await IncidentService.GetIncidentByIdAsync(SelectedIncidentID);
                if (incident != null)
                {
                    IncidentModel = incident;
                }
                else
                {
                    Console.WriteLine($"Incident not found with ID: {SelectedIncidentID}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching incident: {ex.Message}");
            }
        }
        if (isEditIncidentModalFormVisible)
        {
            isEditResolverName = true;
        }
    }

    private List<string> GetIncidentNamesForCategory(string category)
    {
        if (string.IsNullOrEmpty(category))
        {
            return new List<string>();
        }

        if (IncidentFormDictionary.CategoryIncidentNames.ContainsKey(category))
        {
            return IncidentFormDictionary.CategoryIncidentNames[category];
        }

        return new List<string>();
    }

    private List<string> GetPriorityForIncidentName(string incidentName)
    {
        if (string.IsNullOrEmpty(incidentName))
        {
            return new List<string>();
        }
        else
        {
            if (IncidentFormDictionary.IncidentNamePriority.ContainsKey(incidentName))
            {
                var priorities = IncidentFormDictionary.IncidentNamePriority[incidentName];

                if (priorities.Any())
                {
                    IncidentModel.Priority = priorities.First();
                }

                return priorities;
            }
            else
            {
                return new List<string>();
            }
        }
    }

    private List<string> GetDepartmentHeadForLocationDepartment(string departmentHead)
    {
        if (string.IsNullOrEmpty(departmentHead))
        {
            return new List<string>();
        }
        else
        {
            if (IncidentFormDictionary.DepartmentHeadLocationDepartment.ContainsKey(departmentHead))
            {
                var department = IncidentFormDictionary.DepartmentHeadLocationDepartment[departmentHead];

                if (department.Any())
                {
                    IncidentModel.Department_Head = department.First();
                }
                return department;
            }
            else
            {
                return new List<string>();
            }
        }
    }

    private List<string> GetResolverForIncidentName(string incidentName)
    {
        if (string.IsNullOrEmpty(incidentName))
        {
            return new List<string>();
        }
        else
        {
            if (IncidentFormDictionary.ResolverIncidentName.ContainsKey(incidentName))
            {
                var resolver = IncidentFormDictionary.ResolverIncidentName[incidentName];
                if (resolver.Any())
                {
                    IncidentModel.Resolver_Name = resolver.First();
                }
                return resolver;
            }
            else
            {
                return new List<string>();
            }
        }
    }

    private void ResetCategory()
    {
        IncidentModel.Category = "";
        IncidentModel.Incident_Name = null!;
        IncidentModel.Priority = null!;
        IncidentModel.Resolver_Name = null!;
        isEditResolverName = false;
    }


    private void EditResolverName() => isEditResolverName = !isEditResolverName; 

    private async void CloseModal()
    {
        await OnClose.InvokeAsync(null);
    }

    private async Task handleUpdate()
    {
        IncidentModel.Priority ??= IncidentModel.Category == "Others" ? "Others" : "Routine";
        ReturnIncident = await IncidentService.UpdateIncidentAsync(IncidentModel);
        await OnUpdate.InvokeAsync(null);
        CloseModal();
    }
}
