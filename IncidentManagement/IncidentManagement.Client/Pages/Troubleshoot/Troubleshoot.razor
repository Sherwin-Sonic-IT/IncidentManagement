@page "/troubleshoot"
@attribute [Authorize(Roles = "SysAdmin, User, Head")]
@rendermode @(new InteractiveAutoRenderMode(false))

<div class="troubleshoot">
    <div class="troubleshoot__header">
        <div class="troubleshoot__header-search">
            <input type="search" class="troubleshoot__header-search-input" placeholder="Search By Incident Name" @bind="searchQuery" />
            <button type="submit" class="troubleshoot__header-search-submit" @onclick="OnSearchClick">Search</button>
        </div>
        <label>Can't find what you're looking for? Contact: <span class="troubleshoot__header-contact">+6391234567890</span></label>
    </div>

    @if (searchResults != null && searchResults.Any())
    {
        <div class="troubleshoot__search-results">
            <label class="troubleshoot__search-results-list-total-title">Total Results</label>
            <div class="troubleshoot__search-results-list">
                @foreach (var result in searchResults)
                {
                    <div class="troubleshoot__search-results-list-item">
                        <img src="@result.ImageUrl" class="troubleshoot__search-results-list-item-icon" alt="@result.Name" />
                        @result.Name
                    </div>
                }
            </div>
            <div class="troubleshoot__center-survey">
                <label>What do you think of our troubleshoot center? Please <a href="#">take a quick survey</a></label>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(searchQuery) && searchResults.Count == 0 && showNoResultsMessage)
    {
        <p class="troubleshoot__search-no-results-found">No results found.</p>
    }

    <div class="troubleshoot__body">
        <div class="troubleshoot__body-category">
            <p class="troubleshoot__body-category-title">How can we help you?</p>
            <div class="troubleshoot__body-category-list">
                @foreach (var category in categories)
                {
                    <div class="troubleshoot__body-category-item">
                        @category
                        <i class="bi bi-chevron-right"></i>
                    </div>
                }
            </div>
            <button class="troubleshoot__body-view-all-category-btn">View All</button>
        </div>

        <div class="troubleshoot__body-support-team">
            <p class="troubleshoot__body-support-team-title">IT Team</p>
            <div class="troubleshoot__body-support-team-list">
                @foreach (var member in supportTeam)
                {
                    <div class="troubleshoot__body-support-team-member">
                        <img src="@member.ImageUrl" alt="@member.Name" class="troubleshoot__body-support-team-member-image" />
                        <div class="troubleshoot__body-support-team-member-info">
                            <p class="troubleshoot__body-support-team-member-name">@member.Name</p>
                            <p class="troubleshoot__body-support-team-member-position">@member.Position</p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="troubleshoot__body-explore-more">
            <i class="bi bi-chevron-down"></i>
        </div>
    </div>

</div>

@code {
    private string searchQuery = "";
    private List<SearchItem> searchResults = new List<SearchItem>();

    // Updated list of all items with corresponding images
    private List<SearchItem> allItems = new List<SearchItem>
    {
        new SearchItem { Name = "Device Malfunction (printers, scanners, etc)", ImageUrl = "/assets/searchresultsicon/device-malfunction.png" },
        new SearchItem { Name = "Workstation /PC/Laptop Issues", ImageUrl = "/assets/searchresultsicon/pc-laptop-issues.png" },
        new SearchItem { Name = "Internet connectivity problems", ImageUrl = "/assets/searchresultsicon/internet-connectivity-problems.png" },
        new SearchItem { Name = "Software Installation", ImageUrl = "/assets/searchresultsicon/software-installation.png" },
        new SearchItem { Name = "Software Licensing Issues", ImageUrl = "/assets/searchresultsicon/software-license.png" },
        new SearchItem { Name = "Software Crashes and Errors", ImageUrl = "/assets/searchresultsicon/software-error.png" },
        new SearchItem { Name = "Software Performance Optimization", ImageUrl = "/assets/searchresultsicon/software-optimization.png" },
        new SearchItem { Name = "Software Configuration and Setup", ImageUrl = "/assets/searchresultsicon/software-setup.png" },
        new SearchItem { Name = "Flat Tires", ImageUrl = "/assets/searchresultsicon/flat-tires.png" },
    };

    private List<string> categories = new List<string>
    {
       "Network Issues",
        "Software Troubleshooting",
        "Hardware Support",
        "System Errors",
        "General Inquiries",
        "Password Recovery",
        "Account Access Issues",
        "Device Setup and Configuration",
        "Virus and Malware Removal"
    };

    public class SearchItem
    {
        public string Name { get; set; }
        public string ImageUrl { get; set; }
    }

    public class SupportTeamMember
    {
        public string Name { get; set; }
        public string Position { get; set; }
        public string ImageUrl { get; set; }
    }

    private List<SupportTeamMember> supportTeam = new List<SupportTeamMember>
    {
        new SupportTeamMember { Name = "Junix Chan", ImageUrl = "/assets/itteam/junixchan.jpg", Position = "IT Manager" },
        new SupportTeamMember { Name = "Froilan Estalilla", ImageUrl = "/assets/itteam/froilan.jpg", Position = "IT Supervisor" },
        new SupportTeamMember { Name = "Emman", ImageUrl = "/assets/itteam/emman.jpg", Position = "IT Assistant" },
        new SupportTeamMember { Name = "JM Mabasa", ImageUrl = "/assets/itteam/mae.jpg", Position = "IT Assistant" },
        new SupportTeamMember { Name = "Glenne", ImageUrl = "/assets/itteam/glenne.jpg", Position = "IT Assistant" },
        new SupportTeamMember { Name = "Sherwin", ImageUrl = "/assets/itteam/sherwin.webp", Position = "IT Assistant" },
    };

    private string GetRandomLightColor()
    {
        Random random = new Random();
        int r = random.Next(240, 256);
        int g = random.Next(240, 256);
        int b = random.Next(240, 256);
        return $"rgb({r},{g},{b})";
    }

    private bool showNoResultsMessage = false;

    private void OnSearchClick()
    {
        FilterSearchResults();
    }

    private void FilterSearchResults()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            // Filter search results based on the search query
            searchResults = allItems.Where(item => item.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
            showNoResultsMessage = searchResults.Count == 0;
        }
        else
        {
            searchResults.Clear();
            showNoResultsMessage = false;
        }
    }
}
