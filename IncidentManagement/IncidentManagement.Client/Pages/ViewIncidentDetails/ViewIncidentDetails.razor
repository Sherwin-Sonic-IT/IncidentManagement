@page "/view-incident-details/{Incident_ID:int}"
@attribute [Authorize(Roles = "Admin, User, Head")]
@rendermode @(new InteractiveAutoRenderMode(false))
@implements IDisposable

@if (Incident != null)
{
    <EditIncidentModal isEditIncidentModalFormVisible="isEditIncidentModalFormVisible" SelectedIncidentID="@Selected_ID" OnUpdate="OnIncidentUpdate" OnClose="OnEditIncidentModalClose" />
    <div class="view__incident__detail">
        <div class="view__incident__detail-left">
            <div class="view__incident__detail-info" id="view__incident__detail-incident-report">

                <img src="\assets\logo\logo1.jpg" class="view__incident__detail-logo" />
                <h2 class="view__incident__detail-title">Incident Report</h2>
                <div class="view__incident__detail-requester">
                    @if (isRecurringIncident)
                    {
                        <label class="view__incident-recurring">Recurring</label>
                    }
                    <img src="\assets\requesterphoto\person.jpg" class="view__incident__detail__requester-photo" />
                    <div class="view__incident__detail__requester-info">
                        @foreach (var (label, value) in new (string, string)[]
                       {
                    ("Incident ID", Incident.Incident_ID.ToString()),
                    ("End/Affected-User", Incident.Reported_By),
                    ("Location/Dept", Incident.Location),
                    ("Incident Status", Incident.Status)
                       })
                        {
                            <div class="view__incident-detail__info-item">
                                <label>@label</label>
                                <p>@value</p>
                            </div>
                        }
                    </div>
                    <div class="view__incident__detail-date">
                        @foreach (var (label, value) in new (string, string)[]
                       {
                    ("Date Reported", Incident.Date_Reported.ToString()),
                    ("Incident Date", Incident.Incident_Date.ToString())
                       })
                        {
                            <div class="view__incident__detail__date-item">
                                <label>@label</label>
                                <p>@value</p>
                            </div>
                        }
                    </div>
                </div>
                <div class="view__incident__detail-incident">
                    @foreach (var (label, value) in new (string, string)[]
                   {
                ("Incident Name", Incident.Incident_Name),
                ("Category", Incident.Category),
                ("Priority Level", Incident.Priority),
                ("Resolver Name", Incident.Resolver_Name)
                   })
                    {
                        <div class="view__incident__detail__incident-info">
                            <div class="view__incident__detail__incident__info-item">
                                <label>@label</label>
                                <p>@value</p>
                            </div>
                        </div>
                    }
                </div>
                <div class="view__incident__detail-departmenthead">
                    <label>Department Head</label>
                    <p>@Incident.Department_Head</p>
                </div>
            </div>
        </div>
        <div class="view__incident__detail-right">
            <div class="view__incident__detail-cta-support">
                <div class="view__incident__detail-cta">
                    <button class="view__incident__detail-cta-btn" @onclick="DownloadPdf">
                        <i class="bi bi-download"></i> Download
                    </button>
                    <a href="/troubleshoot" class="view__incident__detail-support-btn">
                        <i class="bi bi-exclamation-circle"></i> Troubleshoot
                    </a>
                    @if ((Incident.Status != "Completed" && Incident.User_ID == currentUserId) ||
                   (IsAdmin && Incident.Status != "Completed") ||
                   (Incident.Department_Head == currentUserName && Incident.Status != "Completed"))
                    {
                        <button @onclick="()=>ToggleEditIncidentModal(Incident_ID)"
                                class="view__incident__detail-cta-btn"
                                disabled="@IsEditButtonDisabled()">
                            <i class="bi bi-pencil-square"></i> Edit
                        </button>
                    }
                </div>
            </div>
            <div class="view__incident__detail__comment">
                @if (comments != null && comments.Any())
                {
                    <div class="view__incident__detail__comment__post">
                        <i class="bi bi-fullscreen" @onclick="ToggleCommentFormFullScreen"></i>
                        @if ((Incident.Status != "Completed" && Incident.User_ID == currentUserId) || (IsAdmin && Incident.Status != "Completed"))
                        {
                            <button @onclick="ToggleCommentForm" class="view__incident__detail__comment__post-btn">Comment</button>
                        }
                    </div>
                    @foreach (var comment in comments)
                    {
                        <div class="view__incident__detail__comment-info">
                            <img src="\assets\requesterphoto\person.jpg" class="view__incident__detail__comment-image" />
                            <div class="view__incident__detail__comment-content">
                                <p>
                                    <strong>@comment.Username</strong> - @comment.CreatedAt.ToString("g")
                                </p>
                                <p>@comment.Comment</p>
                                @if (comment.ImageVideoData != null && comment.ImageVideoData.Length > 0)
                                {
                                    var base64Data = Convert.ToBase64String(comment.ImageVideoData);
                                    if (IsImage(comment.ImageVideoData))
                                    {
                                        <img class="clickable-image" style="width: 100%" src="data:image/jpeg;base64,@base64Data" alt="Comment Image" @onclick="() => OpenImageModal(base64Data)" />
                                    }
                                    else if (IsVideo(comment.ImageVideoData))
                                    {
                                        <video style="width: 100%" controls>
                                            <source src="data:video/mp4;base64,@base64Data" type="video/mp4" />
                                            Your browser does not support the video tag.
                                        </video>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            else
            {
            <div class="view__incident__detail__no-comment @(isCommentFormVisible ? "hideNoComment": "")">
            <p>No comment yet</p>
            </div>
            }
                @if ((Incident.Status == "Pending" &&
               (Incident.User_ID == currentUserId || Incident.Resolver_ID == currentUserId || IsAdmin)))
                {
                    <EditForm Model="@this" OnValidSubmit="PostComment">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="view__incident__detail__comment-form @(isCommentFormVisible ? "showCommentForm" : "hideCommentForm")">

                            <div class="view__incident__detail__comment-form-header" @onclick="ToggleCommentForm">
                                <div class="view__incident__detail__comment-form-header-cta">
                                    <label class="view__incident__detail__comment-form-header-cta-title">Comment Support</label>
                                    <i class="bi bi-chat-left"></i>
                                </div>
                            </div>

                            <div class="view__incident__detail__comment-form-body">
                                <img src="\assets\chatbot\chatbot.gif" class="view__incident__detail__comment-form-body-bot-img" />

                                @if (IsAdmin)
                                {
                                    <div class="view__incident__detail__comment-form-body-user-select-option">
                                        <p>Welcome back, @currentUserName! 👋 Glad to have you here again.</p>
                                        <button class="view__incident__detail__comment-form-body-user-select-option" @onclick='() => SelectCommentOption("Got it! I’ll be there in a few minutes to help you out.")' disabled="@isCommentNotEmpty">Got it! I’ll be there in a few minutes to help you out.</button>
                                        <button class="view__incident__detail__comment-form-body-user-select-option" @onclick='() => SelectCommentOption("Hi there! 👋 Thanks for reaching out. I’m currently handling some urgent incidents, so I need to prioritize those first. I apologize for the wait, but I’ll be with you as soon as I can. Thank you for your patience!")' disabled="@isCommentNotEmpty">
                                            Hi there! 👋 Thanks for reaching out. I’m currently handling some urgent incidents, so I need to prioritize those first. I apologize for the wait, but I’ll be with you as soon as I can. Thank you for your patience!
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <p>Hey there! 👋 How can I assist you today? Let me know what’s going on—just leave a comment, and I’ll get back to you ASAP!</p>
                                    <div class="view__incident__detail__comment-form-body-user-select-option">
                                        <button @onclick='() => SelectCommentOption("I have an issue with my computer")' disabled="@isCommentNotEmpty">I have an issue with my computer</button>
                                        <button @onclick='() => SelectCommentOption("I need help with software installation")' disabled="@isCommentNotEmpty">I need help with software installation</button>
                                        <button @onclick='() => SelectCommentOption("My internet is not working")' disabled="@isCommentNotEmpty">My internet is not working</button>
                                        <button @onclick='() => SelectCommentOption("Password reset request")' disabled="@isCommentNotEmpty">Password reset request</button>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(imagePreview))
                                {
                                    <div class="view__incident__detail__comment-form-preview-image">
                                        <img src="@imagePreview" alt="Image Preview" style="max-width: 120px; max-height: 100px;" />
                                        <button @onclick="RemoveImage" class="view__incident__detail__remove-image-btn">
                                            Remove
                                        </button>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(videoPreviewUrl))
                                {
                                    <div class="view__incident__detail__comment-form-preview-image">
                                        <video style="max-width: 120px; max-height: 100px;" controls>
                                            <source src="@videoPreviewUrl" type="video/mp4" />
                                            Your browser does not support the video tag.
                                        </video>
                                        <button @onclick="RemoveVideo" class="view__incident__detail__remove-image-btn">
                                            Remove
                                        </button>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="view__incident__detail__comment-form-body-error-massage">
                                        @errorMessage
                                    </div>
                                }
                            </div>
                            <div class="view__incident__detail__comment-form-footer">
                                @if (isUploadImageVideoVisible)
                                {
                                    <InputFile OnChange="HandleFileSelected" />
                                }
                                else
                                {
                                    <input type="text" @bind="newComment" placeholder="write a comment" @oninput="HandleInputChange" @onkeydown="HandleKeyDown" />
                                }
                                <div class="view__incident__detail__comment-form-footer-upload-send">
                                    <i class="bi bi-card-image" @onclick="toggleUploadImage"></i>
                                    <button type="submit">Send <i class="bi bi-send-fill"></i></button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
            @if (isCommentFormFullScreen == true)
            {
                <div class="view__incident__detail-fullscreen @(isCommentFormFullScreen ? "comment__form__fullscreen-open": "comment__form__fullscreen-closed")">
                    <div class="view__incident__detail__fullscreen-content">
                        <div class="view__incident__detail__fullscreen-left">
                            <h3 class="view__incident__detail__fullscreen-incident-name">
                                @Incident.Incident_Name
                                <i class="bi bi-dash-lg close-fullscreen" @onclick="ToggleCommentFormFullScreen"></i>
                            </h3>

                            @foreach (var user in new[] { new { Name = "Glenne", Role = "Admin", DepartmentHead = false },
                    new { Name = Incident.Department_Head, Role = "User", DepartmentHead = true } })
                            {
                                <div class="view__incident__detail__fullscreen-users">
                                    <img src="\assets\requesterphoto\person.jpg" class="view__incident__detail__comment-image" />
                                    <div class="view__incident__detail__fullscreen-user-info">
                                        <div class="view__incident__detail__fullscreen__user__info-username">
                                            <p class="view__incident__detail__fullscreen__user__info__username-username">
                                                @(user.DepartmentHead ? Incident.Department_Head : user.Name)
                                            </p>
                                            <div class="view__incident__detail__fullscreen__user-status">
                                                <i class="bi bi-dot"></i>
                                                <label class="view__incident__detail__fullscreen__user__info-status"> Online</label>
                                            </div>
                                        </div>
                                        <label>@user.Role</label>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="view__incident__detail__fullscreen-center">
                            <div class="view__incident__detail__fullscreen-form">
                                <textarea rows="3" class="view__incident__detail__fullscreen-textarea" cols="10" maxlength="250" placeholder="Please provide any relevant information, observations, or suggestions regarding the incident. . ." @bind="newComment"></textarea>
                                @if ((Incident.Status != "Completed" && Incident.User_ID == currentUserId) || (IsAdmin && Incident.Status != "Completed"))
                                {
                                    <div class="view__incident__detail__fullscreen__form-button">
                                        <button type="submit" class="view__incident__detail__fullscreen__form-submit" @onclick="PostComment">Submit</button>
                                    </div>
                                }
                            </div>
                            @if (comments != null && comments.Any())
                            {
                                @foreach (var comment in comments)
                                {
                                    <div class="view__incident__detail__comment-info">
                                        <img src="\assets\requesterphoto\person.jpg" class="view__incident__detail__comment-image" />
                                        <div class="view__incident__detail__comment-content">
                                            <p>
                                                <strong>@comment.Username</strong> - @comment.CreatedAt.ToString("g")
                                            </p>
                                            <p>@comment.Comment</p>
                                            @if (comment.ImageVideoData != null && comment.ImageVideoData.Length > 0)
                                            {
                                                var base64Data = Convert.ToBase64String(comment.ImageVideoData);
                                                if (IsImage(comment.ImageVideoData))
                                                {
                                                    <img style="width: 100%" src="data:image/jpeg;base64,@base64Data" alt="Comment Image" />
                                                }
                                                else if (IsVideo(comment.ImageVideoData))
                                                {
                                                    <video style="width: 100%" controls>
                                                        <source src="data:video/mp4;base64,@base64Data" type="video/mp4" />
                                                        Your browser does not support the video tag.
                                                    </video>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="view__incident__detail__fullscreen-right">
                            <div class="view__incident__detail-cta-support">
                                <div class="view__incident__detail-cta">
                                    <button class="view__incident__detail-cta-btn" @onclick="DownloadPdf">
                                        <i class="bi bi-download"></i> Download
                                    </button>
                                    <a href="/troubleshoot" class="view__incident__detail-support-btn">
                                        <i class="bi bi-exclamation-circle"></i> Troubleshoot
                                    </a>
                                    @if ((Incident.Status != "Completed" && Incident.Department_Head == currentUserName) || (IsAdmin && Incident.Status != "Completed"))
                                    {
                                        <button @onclick="()=>ToggleEditIncidentModal(Incident_ID)" class="view__incident__detail-cta-btn" disabled="@IsEditButtonDisabled()">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        @if (isImageModalVisible)
        {
            <div class="image-modal-overlay" @onclick="CloseImageModal">
                <div class="image-modal">
                    <img src="data:image/jpeg;base64,@imageToDisplay" alt="Expanded Image" style="width: 100%" />
                </div>
            </div>
        }

    </div>
}


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public int Incident_ID { get; set; }
    [Parameter] public EventCallback OnCommentPosted { get; set; }
    private Incidents_TBL Incident;
    private List<Board_TBL> comments;
    private string newComment = string.Empty;
    private bool isCommentNotEmpty = false;
    private string adminUsername = "Glenne";
    private string userRole;
    private bool IsAdmin { get; set; }
    private int currentUserId;
    private string currentUserName;

    private int Selected_ID { get; set; }
    private bool isEditIncidentModalFormVisible = false;
    private bool isCommentFormVisible = false;
    private bool isCommentFormFullScreen = false;
    private bool isRecurringIncident = false;
    private bool isUploadImageVideoVisible = false;

    private DateTime? previousIncidentDate;
    private int? previousIncidentID;

    string errorMessage = "";
    private string? imagePreview;
    private IBrowserFile? imageFile;
    private string videoPreviewUrl = null!;
    private IBrowserFile? videoFile;

    private bool isImageModalVisible = false;
    private string imageToDisplay;

    private Timer _timer;
    private bool _isTimerRunning;
    private const int RefreshInterval = 30000;

    protected override async Task OnInitializedAsync()
    {
        await UserAuthentication();
        await LoadIncidentDetails();
        await LoadComments();
        await StartTimer();
        await IsRecurring();
    }

    private async Task LoadIncidentDetails()
    {
        Incident = await IncidentService.GetIncidentByIdAsync(Incident_ID);
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadComments()
    {
        comments = await BoardService.GetCommentsByIncidentIdAsync(Incident_ID);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartTimer();
        }
    }

    public void Dispose()
    {
        StopTimer();
        Console.WriteLine("Component disposed and timer stopped in view incident details.");
    }

    private async Task StartTimer()
    {
        if (!_isTimerRunning)
        {
            _timer = new Timer(RefreshInterval);
            _timer.Elapsed += async (sender, e) =>
            {
                if (!isEditIncidentModalFormVisible)
                {
                    await InvokeAsync(() => LoadComments());
                }
            };
            _timer.Start();
            _isTimerRunning = true;
            Console.WriteLine("Timer started in view incident details.");
        }
    }

    private void StopTimer()
    {
        if (_isTimerRunning)
        {
            _timer?.Stop();
            _timer?.Dispose();
            _isTimerRunning = false;
            Console.WriteLine("Timer stopped in view incident details.");
        }
        else
        {
            Console.WriteLine("Timer is not running, nothing to stop in view incident details.");
        }
    }

    // private async Task StartTimer()
    // {
    //     _timer = new Timer(RefreshInterval);
    //     _timer.Elapsed += async (sender, e) =>
    //     {
    //         if (!isEditIncidentModalFormVisible)
    //         {
    //             await InvokeAsync(() => LoadComments());
    //         }
    //     };
    //     _timer.Start();
    // }

    // private void StopTimer()
    // {
    //     if (_timer != null)
    //     {
    //         _timer.Stop();
    //         _timer.Dispose();
    //     }
    // }

    private async Task IsRecurring()
    {
        isRecurringIncident = await IncidentService.IsIncidentRecurringAsync(
        Incident.Location, Incident.Incident_Name, Incident.Reported_By);
    }

    private async Task UserAuthentication()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        var userIdClaim = user?.FindFirst(ClaimTypes.NameIdentifier);

        if (userIdClaim != null)
        {
            currentUserId = int.Parse(userIdClaim.Value);
        }
        else
        {
            currentUserId = 0;
        }

        currentUserName = user.Identity!.Name!;
        IsAdmin = currentUserName == adminUsername;
        var roleClaim = user?.FindFirst(ClaimTypes.Role);
        userRole = roleClaim?.Value ?? "No role assigned";
    }

    private void ToggleEditIncidentModal(int Incident_ID)
    {
        Selected_ID = Incident_ID;
        isEditIncidentModalFormVisible = !isEditIncidentModalFormVisible;
    }

    private void ToggleCommentForm() => isCommentFormVisible = !isCommentFormVisible;
    private void ToggleCommentFormFullScreen() => isCommentFormFullScreen = !isCommentFormFullScreen;
    private void toggleUploadImage() => isUploadImageVideoVisible = !isUploadImageVideoVisible;
    private void OnEditIncidentModalClose() => isEditIncidentModalFormVisible = false;
    private async void OnIncidentUpdate() => await LoadIncidentDetails();

    private bool IsEditButtonDisabled() =>
     IsAdmin
         ? Incident.Status == "Completed"
         : (Incident.Status == "Completed" || Incident.User_ID != currentUserId) && Incident.Department_Head != currentUserName;

    private async Task PostComment()
    {
        if (string.IsNullOrWhiteSpace(newComment) && imageFile == null && videoFile == null)
        {
            return;
        }
        byte[] imageVideoData = new byte[0];
        if (imageFile != null)
        {
            imageVideoData = await ConvertImageToByteArray(imageFile);
        }
        else if (videoFile != null)
        {
            imageVideoData = await ConvertImageToByteArray(videoFile);
        }
        var incident = await IncidentService.GetIncidentByIdAsync(Incident_ID);
        int parentCommentID = 1;
        if (incident != null)
        {
            parentCommentID = (currentUserId == incident.User_ID) ? incident.Resolver_ID : incident.User_ID;
        }
        var comment = new Board_TBL
            {
                User_ID = currentUserId,
                Resolver_ID = currentUserId == incident!.Resolver_ID ? 0 : incident?.Resolver_ID ?? 0,
                // Resolver_ID = incident!.Resolver_ID,
                Incident_ID = Incident_ID,
                Username = currentUserName,
                Comment = newComment!,
                CreatedAt = DateTime.Now,
                ImageVideoData = imageVideoData,
                ParentCommentID = parentCommentID
            };
        Console.WriteLine($"File type: {(imageFile?.ContentType ?? videoFile?.ContentType)}, Size: {(imageFile?.Size ?? videoFile?.Size)} bytes");
        await BoardService.AddCommentAsync(comment);
        await LoadComments();
        ResetCommentForm();
    }

    private void ResetCommentForm()
    {
        newComment = string.Empty;
        imageFile = null;
        imagePreview = null;
        videoFile = null;
        videoPreviewUrl = null!;
        isCommentFormVisible = false;
        isUploadImageVideoVisible = false;
        isCommentNotEmpty = false;
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        newComment = string.Empty;
        newComment = e.Value?.ToString() ?? string.Empty;
        isCommentNotEmpty = !string.IsNullOrEmpty(newComment);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(newComment))
        {
            await PostComment();
        }
    }

    private void SelectCommentOption(string comment)
    {
        newComment = comment;
    }

    private async Task<byte[]> ConvertImageToByteArray(IBrowserFile file)
    {
        const long maxFileSize = 5 * 1024 * 1024;
        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream(maxAllowedSize: maxFileSize).CopyToAsync(memoryStream);
            var byteArray = memoryStream.ToArray();
            Console.WriteLine($"Image byte array length: {byteArray.Length}");
            return byteArray;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        const long maxFileSize = 5 * 1024 * 1024;

        if (file == null || !(file.ContentType.StartsWith("image/") || file.ContentType.StartsWith("video/")))
        {
            errorMessage = "Please select a valid image or video file.";
            return;
        }

        if (file.Size > maxFileSize)
        {
            errorMessage = "The selected file exceeds the 5MB size limit.";
            return;
        }

        errorMessage = string.Empty;
        if (file.ContentType.StartsWith("image/"))
        {
            imageFile = file;
            imagePreview = await GeneratePreviewUrl(file);
        }
        else if (file.ContentType.StartsWith("video/"))
        {
            videoFile = file;
            videoPreviewUrl = await GeneratePreviewUrl(file);
        }
    }

    private async Task<string> GeneratePreviewUrl(IBrowserFile file)
    {
        using var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var fileBytes = stream.ToArray();
        return $"data:{file.ContentType};base64,{Convert.ToBase64String(fileBytes)}";
    }

    private bool IsImage(byte[] data)
    {
        if (data.Length < 4)
            return false;
        if (data[0] == 0xFF && data[1] == 0xD8 && data[2] == 0xFF)
        {
            return true;
        }
        if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47)
        {
            return true; 
        }
        if (data[0] == 0x47 && data[1] == 0x49 && data[2] == 0x46 && data[3] == 0x38)
        {
            return true; 
        }
        if (data[0] == 0x42 && data[1] == 0x4D)
        {
            return true; 
        }
        return false;
    }

    private bool IsVideo(byte[] data)
    {
        return data.Length > 4 && data.Take(4).SequenceEqual(new byte[] { 0x00, 0x00, 0x00, 0x18 });
    }

    private void OpenImageModal(string base64Data)
    {
        imageToDisplay = base64Data;
        isImageModalVisible = true;
    }

    private void CloseImageModal() => isImageModalVisible = false;
    private void RemoveImage() => RemoveFile(ref imageFile, ref imagePreview);
    private void RemoveVideo() => RemoveFile(ref videoFile, ref videoPreviewUrl);

    private void RemoveFile(ref IBrowserFile? file, ref string? previewUrl)
    {
        file = null;
        previewUrl = null!;
        isUploadImageVideoVisible = false;
    }

    private async Task DownloadPdf()
    {
        await JS.InvokeVoidAsync("generatePdfFromHtml", "#view__incident__detail-incident-report");
    }


}


