@*CURRENT USE ========>>>>>>

@page "/"
@layout LoginLayout

<div class="login">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="login__wave__svg__top">
        <path fill="#003366" fill-opacity="1" d="M0,288L720,64L1440,192L1440,320L720,320L0,320Z"></path>
    </svg>

    <div class="login__header">
        <label class="login__header__logo">Sonic Incident Management (SIM)</label>
        <div class="login__header__links">
            <a href="#">About</a>
            <a href="#">Help <i class="bi bi-question-circle"></i></a>
        </div>
    </div>

    <div class="login__container">
        <div class="login__form">
            <label class="login__form__subtext">Hello,</label>
            <h1 class="login__form__title typing-animation">Welcome Back!</h1>
            <p class="login__form__description">
                Please log in to access and manage incidents, track resolutions, and ensure timely responses.
                Your efforts help us maintain smooth operations and improve service efficiency.
                Enter your credentials to get started.
            </p>

            <EditForm Model="UserModel" OnValidSubmit="Authenticate" FormName="LoginForm" class="login__form__form">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputText type="text" @bind-Value="UserModel.Username" placeholder="Username" required class="login__form__input" />
                <InputText type="password" @bind-Value="UserModel.Password" placeholder="Password" required class="login__form__input" />

                <div class="login__errorMessage @(errorMessage != null ? "login__form__errorMessage" : "")">
                    <span>@errorMessage</span>
                </div>

                <button type="submit" class="login__form__submit-btn">Login</button>
            </EditForm>
        </div>

        <div class="login__form__image__container">
            <img src="/assets/login/sean-pollock-phyq704ffda-unsplash.jpg" class="login__form__image" />
        </div>
    </div>

    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="login__wave__svg__bottom">
        <path fill="#003366" fill-opacity="1" d="M0,288L720,64L1440,192L1440,320L720,320L0,320Z"></path>
    </svg>

    <div class="login__footer">
        <label>&copy; 2024 All Right Reserved</label>
        <label>Version 1.0</label>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public Users_TBL UserModel { get; set; } = new Users_TBL();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = await dataContext.Users_TBL
            .FirstOrDefaultAsync(x => x.Username == UserModel.Username);

        if (userAccount == null || userAccount.Password != UserModel.Password)
        {
            errorMessage = "*Invalid Username or Password";
            return;
        }
        var claims = new List<Claim> {
            new Claim(ClaimTypes.Name, UserModel.Username),
            new Claim(ClaimTypes.Role, userAccount.Role),
            new Claim(ClaimTypes.NameIdentifier, userAccount.User_ID.ToString()),
            new Claim("Location", userAccount.Location),
            new Claim("Department_Head", userAccount.Department_Head)
        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext!.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
        navigationManager.NavigateTo("/dashboard");
    }
}

@*CURRENT USE ========>>>>>>   *@





@page "/"
@layout LoginLayout
@using System.Security.Claims
@using IncidentManagement.Components.Layout
@using IncidentManagement.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

<div class="login">
    <div class="login__navbar">
        <label class="login__navbar-title">Incident Management (IM)</label>
        <div class="login__navbar-links">
            <a href="#" class="login__navbar-link">About</a>
            <a href="#" class="login__navbar-link">Contact</a>
            <a href="#" class="login__navbar-link">Feedback</a>
        </div>
    </div>

    <div class="login__header">
        <div class="login__header-text-section">
            <label class="login__header-subtext">Hello,</label>
            <h1 class="login__header-greetings typing-animation">Welcome Back!</h1>
            <p class="login__header-text">
                Please log in to access and manage incidents, track resolutions, and ensure timely responses.
                Your efforts help us maintain smooth operations and improve service efficiency.
                Enter your credentials to get started.
            </p>
        </div>
        <div class="login__header-image">
            <img src="/assets/login/tech company-amico (1).png" />
        </div>
    </div>
    <div class="login__users-image-list">
        @foreach (var user in usersList)
        {
            <img src="@user.Image" alt="User Image" class="user-image" />

        }
        <div class="login__users-plus">@userCount+</div>
    </div>

    <div class="login__form">
        <div class="login__form-logo">
            <img src="/assets/logo/logo1.jpg" />
        </div>
        <h3 class="login__form-sign-title">Sign in</h3>
      
        <EditForm Model="@logDTO" OnValidSubmit="OnAuthenticate" FormName="LoginForm" class="login__form-form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>Username</label>
            <InputText type="text" @bind-Value="logDTO.Username" required />
            <label> Password</label>
            <InputText type="password" @bind-Value="logDTO.Password" required />
            <div class="login__form-error-message">@message</div>
           <div class="login__form-forgot-password">
                <a href="#">Forgot Password</a>
           </div>
       
            <button type="submit" class="login__form-submit">Login</button>
            <div class="login__form-or">
                <label>OR</label>
            </div>
            <div class="login__form-social-media">
                <button><img src="/assets/login/svgpngicons/google.png" />Google</button>
                <button><img src="/assets/login/svgpngicons/fb.png" />Facebook</button>
                <button><img src="/assets/login/svgpngicons/github.jpg" />Github</button>
            </div>
        </EditForm>   
    </div>


    <div class="login__incident-management-overview">
        <iframe width="560"
                height="315"
                src="https://www.youtube.com/embed/47iyD-GDPU0?autoplay=1&mute=1&si=HybVA8T4r_8uRiLl"
                title="YouTube video player"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                referrerpolicy="strict-origin-when-cross-origin"
                allowfullscreen>
        </iframe>
        <div class="login__incident-management-overview-key-objectives">
            <h4 class="login__incident-management-overview-key-objectives-title">Key Objectives of Incident Management</h4>
            <ul class="login__incident-management-overview-key">
                <li><strong>Swift Resolution:</strong> The primary aim is to address incidents in a timely manner, reducing service interruptions and keeping operations running smoothly.</li>
                <li><strong>Minimizing Impact:</strong> Effective incident management minimizes the impact of incidents on business operations, user productivity, and service delivery.</li>
                <li><strong>Improved Efficiency:</strong> Incident management ensures that teams can quickly identify, prioritize, and address issues, improving response time and team efficiency.</li>
                <li><strong>Enhanced Customer Satisfaction:</strong> By resolving incidents swiftly, customer satisfaction improves, building trust and reliability in the service.</li>
                <li><strong>Continuous Improvement:</strong> Incident management provides valuable insights into recurring problems and allows organizations to improve systems and processes to prevent future disruptions.</li>
            </ul>
        </div>
    </div>


</div>

@code {
    [CascadingParameter]
    public HttpContext _httpContext { get; set; }

    [SupplyParameterFromForm]
    private LoginDTO logDTO { get; set; } = new();

    private UserM useraccount = new();

    private string message = string.Empty;
    private string title = string.Empty;
    private bool showAlert = false;

    private bool isShowChangePass = true;

    private string returnUrl = string.Empty;
    private string test = string.Empty;

    public class UserImage
    {
        public string Image { get; set; }
    }

    private List<UserImage> usersList = new List<UserImage>
    {
        new UserImage { Image = "/assets/ITteam/Emman.jpg" },
        new UserImage { Image = "/assets/ITteam/Froilan.jpg" },
        new UserImage { Image = "/assets/ITteam/glenne.jpg" },
        new UserImage { Image = "/assets/ITteam/JunixChan.jpg" },
        new UserImage { Image = "/assets/ITteam/Mae.jpg" },
        new UserImage { Image = "/assets/ITteam/Sherwin.webp" },
    };

    // New property to store user count
    private int userCount;

    private bool _processing = false;

    // Fetch user count on page load
    protected override async Task OnInitializedAsync()
    {
        userCount = await userSvc.GetExistCount(); // Fetch user count
    }

    public void CloseMe()
    {
        showAlert = false;
    }

    private async Task OnAuthenticate()
    {
        _processing = true;

        var totalcounts = await userSvc.GetExistCount();
        if (totalcounts == 0)
        {
            await SyscAllMasterDataWoProgress();
        }
        useraccount = await userSvc.GetLoginAccount(logDTO.Username);
        if (useraccount is null || useraccount.Password != logDTO.Password)
        {
            showAlert = true;
            message = "Invalid Username or Password";
            _processing = false;
            return;
        }

        var role = useraccount.RoleGroup.RoleGrpDetails.FirstOrDefault(e => e.Application.Abbreviation.Equals("IM"));
        if (role is null || useraccount.StatusId == 2)
        {
            showAlert = true;
            title = "Access Denied";
            message = "Sorry, you don't have permission to access this site.";
            _processing = false;
            return;
        }

        var stringsites = string.Join(",", useraccount.SiteIds);

        var _claims = new List<Claim>
        {
            new Claim(ClaimTypes.PrimarySid, useraccount.Id.ToString()), //USER ID
            new Claim(ClaimTypes.Name, useraccount.FullName),
            new Claim(ClaimTypes.Role, role.SystemRole.RoleCode),
            new Claim(ClaimTypes.NameIdentifier, useraccount.RoleGroup.RoleName),
            new Claim(ClaimTypes.GroupSid, stringsites), //SITE ID
            new Claim("Location", useraccount.Location),
            new Claim("Department_Head", useraccount.Department_Head),
            new Claim("RoleGroupId", useraccount.RoleGroupId.ToString())
        };

        var _identity = new ClaimsIdentity(_claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var _principal = new ClaimsPrincipal(_identity);
        await _httpContext.SignInAsync(_principal);

        useraccount.LoginStatus = "Active";
        await userSvc.UpdateObjStatus(useraccount);

        var uri = new Uri(navigationManager.Uri);
        var statusFilterString = uri.Query.Split("=%2F").LastOrDefault();
        navigationManager.NavigateTo(string.IsNullOrEmpty(statusFilterString) ? "/dashboard" : $"/{statusFilterString.Replace("%2F", "/")}");
    }

    public async Task SyscAllMasterDataWoProgress()
    {
        var systemRole = await mdApiSvc.GetAllSystemRole();
        foreach (var item in systemRole)
        {
            var newObj = new SystemRoleM()
                {
                    RoleCode = item.RoleCode,
                    RoleName = item.RoleName,
                };
            await sysRoleSvc.CreateUpdateObj(newObj);
        }
        var appsApi = await mdApiSvc.GetAllApplication();
        foreach (var item in appsApi)
        {
            var newObj = new ApplicationM()
                {
                    Abbreviation = item.Abbreviation,
                    Name = item.Name,
                    Status = item.Status,
                    IP = item.IP,
                    Port = item.Port,
                };
            await appSvc.CreateUpdateObj(newObj);
        }
        var roleApi = await mdApiSvc.GetAllRoleGrpHeader();
        foreach (var item in roleApi)
        {
            var newObj = new RoleGroupHeaderM()
                {
                    RoleCode = item.RoleCode,
                    RoleName = item.RoleName,
                    DateCreated = item.DateCreated,
                };
            await roleGrpSvc.CreateUpdateObj(newObj);
        }
        var roleDetApi = await mdApiSvc.GetAllRoleGrpDetail();
        foreach (var item in roleDetApi)
        {
            var newObj = new RoleGroupDetailM()
                {
                    RoleGroupHeaderMId = item.RoleGroupHeaderMId,
                    ApplicationId = item.ApplicationId,
                    SystemRoleId = item.SystemRoleId,
                    DateCreated = item.DateCreated,
                };
            await roleGrpDetSvc.CreateUpdateObj(newObj);
        }

        var userApi = await mdApiSvc.GetAllUsers();
        foreach (var item in userApi)
        {
            var newObj = new UserM()
                {
                    UserId = item.UserId,
                    FullName = item.FullName,
                    Username = item.Username,
                    Password = item.Password,
                    StatusId = item.StatusId,
                    LoginStatus = item.LoginStatus,
                    RoleGroupId = item.RoleGroupId,
                    DateCreated = item.DateCreated,
                    DateStatus = item.DateStatus,
                    DateUpdated = item.DateUpdated,
                    SiteCodes = item.SiteCodes,
                    SiteIds = item.SiteIds,
                    IsChangePassOnLogin = item.IsChangePassOnLogin,
                    IsCantChangePass = item.IsCantChangePass,
                    IsPasswordNeverExpires = item.IsPasswordNeverExpires,
                    ExpiryDate = item.ExpiryDate,
                    Department_Head = item.Department_Head ?? "Default Department Head",
                    Location = item.Location ?? "Default Location"
                };
            await userSvc.CreateUpdateObj(newObj);
        }
    }
}
